// Code generated by protoc-gen-go. DO NOT EDIT.
// source: structs/product_data.proto

package structs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ProductHttpResponse struct {
	ProductId    uint64        `protobuf:"varint,1,opt,name=product_id,json=productId" json:"product_id,omitempty"`
	HttpResponse *HttpResponse `protobuf:"bytes,2,opt,name=http_response,json=httpResponse" json:"http_response,omitempty"`
}

func (m *ProductHttpResponse) Reset()                    { *m = ProductHttpResponse{} }
func (m *ProductHttpResponse) String() string            { return proto.CompactTextString(m) }
func (*ProductHttpResponse) ProtoMessage()               {}
func (*ProductHttpResponse) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *ProductHttpResponse) GetProductId() uint64 {
	if m != nil {
		return m.ProductId
	}
	return 0
}

func (m *ProductHttpResponse) GetHttpResponse() *HttpResponse {
	if m != nil {
		return m.HttpResponse
	}
	return nil
}

type ProductPreferences struct {
	Preferences map[uint64]float32 `protobuf:"bytes,1,rep,name=preferences" json:"preferences,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	Percentiles []float32          `protobuf:"fixed32,2,rep,packed,name=percentiles" json:"percentiles,omitempty"`
}

func (m *ProductPreferences) Reset()                    { *m = ProductPreferences{} }
func (m *ProductPreferences) String() string            { return proto.CompactTextString(m) }
func (*ProductPreferences) ProtoMessage()               {}
func (*ProductPreferences) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *ProductPreferences) GetPreferences() map[uint64]float32 {
	if m != nil {
		return m.Preferences
	}
	return nil
}

func (m *ProductPreferences) GetPercentiles() []float32 {
	if m != nil {
		return m.Percentiles
	}
	return nil
}

type ProductsPreferences struct {
	Products map[uint64]*ProductPreferences `protobuf:"bytes,1,rep,name=products" json:"products,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *ProductsPreferences) Reset()                    { *m = ProductsPreferences{} }
func (m *ProductsPreferences) String() string            { return proto.CompactTextString(m) }
func (*ProductsPreferences) ProtoMessage()               {}
func (*ProductsPreferences) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *ProductsPreferences) GetProducts() map[uint64]*ProductPreferences {
	if m != nil {
		return m.Products
	}
	return nil
}

type PreferencesMap struct {
	PreferencesMap map[string]*ProductsPreferences `protobuf:"bytes,1,rep,name=preferencesMap" json:"preferencesMap,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *PreferencesMap) Reset()                    { *m = PreferencesMap{} }
func (m *PreferencesMap) String() string            { return proto.CompactTextString(m) }
func (*PreferencesMap) ProtoMessage()               {}
func (*PreferencesMap) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *PreferencesMap) GetPreferencesMap() map[string]*ProductsPreferences {
	if m != nil {
		return m.PreferencesMap
	}
	return nil
}

type ProductStoreData struct {
	Name        string   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	BanerUrl    string   `protobuf:"bytes,2,opt,name=banerUrl" json:"banerUrl,omitempty"`
	Tags        []string `protobuf:"bytes,3,rep,name=tags" json:"tags,omitempty"`
	Genre       []string `protobuf:"bytes,4,rep,name=genre" json:"genre,omitempty"`
	Flags       []string `protobuf:"bytes,5,rep,name=flags" json:"flags,omitempty"`
	Developer   []string `protobuf:"bytes,6,rep,name=developer" json:"developer,omitempty"`
	Publisher   []string `protobuf:"bytes,7,rep,name=publisher" json:"publisher,omitempty"`
	Thumbnails  []string `protobuf:"bytes,8,rep,name=thumbnails" json:"thumbnails,omitempty"`
	Trailers    []string `protobuf:"bytes,9,rep,name=trailers" json:"trailers,omitempty"`
	ReleaseDate int64    `protobuf:"varint,10,opt,name=release_date,json=releaseDate" json:"release_date,omitempty"`
	Reviews     int32    `protobuf:"varint,11,opt,name=reviews" json:"reviews,omitempty"`
}

func (m *ProductStoreData) Reset()                    { *m = ProductStoreData{} }
func (m *ProductStoreData) String() string            { return proto.CompactTextString(m) }
func (*ProductStoreData) ProtoMessage()               {}
func (*ProductStoreData) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *ProductStoreData) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProductStoreData) GetBanerUrl() string {
	if m != nil {
		return m.BanerUrl
	}
	return ""
}

func (m *ProductStoreData) GetTags() []string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *ProductStoreData) GetGenre() []string {
	if m != nil {
		return m.Genre
	}
	return nil
}

func (m *ProductStoreData) GetFlags() []string {
	if m != nil {
		return m.Flags
	}
	return nil
}

func (m *ProductStoreData) GetDeveloper() []string {
	if m != nil {
		return m.Developer
	}
	return nil
}

func (m *ProductStoreData) GetPublisher() []string {
	if m != nil {
		return m.Publisher
	}
	return nil
}

func (m *ProductStoreData) GetThumbnails() []string {
	if m != nil {
		return m.Thumbnails
	}
	return nil
}

func (m *ProductStoreData) GetTrailers() []string {
	if m != nil {
		return m.Trailers
	}
	return nil
}

func (m *ProductStoreData) GetReleaseDate() int64 {
	if m != nil {
		return m.ReleaseDate
	}
	return 0
}

func (m *ProductStoreData) GetReviews() int32 {
	if m != nil {
		return m.Reviews
	}
	return 0
}

type ProductStoreDataDump struct {
	Data      *ProductStoreData `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Timestamp int64             `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Id        uint64            `protobuf:"varint,3,opt,name=id" json:"id,omitempty"`
}

func (m *ProductStoreDataDump) Reset()                    { *m = ProductStoreDataDump{} }
func (m *ProductStoreDataDump) String() string            { return proto.CompactTextString(m) }
func (*ProductStoreDataDump) ProtoMessage()               {}
func (*ProductStoreDataDump) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *ProductStoreDataDump) GetData() *ProductStoreData {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ProductStoreDataDump) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProductStoreDataDump) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type Product struct {
	Id                 uint64            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	OwnersNum          uint64            `protobuf:"varint,2,opt,name=owners_num,json=ownersNum" json:"owners_num,omitempty"`
	FractionOfOwners   float32           `protobuf:"fixed32,3,opt,name=fraction_of_owners,json=fractionOfOwners" json:"fraction_of_owners,omitempty"`
	PlaytimePercentile []uint64          `protobuf:"varint,4,rep,packed,name=playtime_percentile,json=playtimePercentile" json:"playtime_percentile,omitempty"`
	StoreData          *ProductStoreData `protobuf:"bytes,5,opt,name=store_data,json=storeData" json:"store_data,omitempty"`
}

func (m *Product) Reset()                    { *m = Product{} }
func (m *Product) String() string            { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()               {}
func (*Product) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{6} }

func (m *Product) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetOwnersNum() uint64 {
	if m != nil {
		return m.OwnersNum
	}
	return 0
}

func (m *Product) GetFractionOfOwners() float32 {
	if m != nil {
		return m.FractionOfOwners
	}
	return 0
}

func (m *Product) GetPlaytimePercentile() []uint64 {
	if m != nil {
		return m.PlaytimePercentile
	}
	return nil
}

func (m *Product) GetStoreData() *ProductStoreData {
	if m != nil {
		return m.StoreData
	}
	return nil
}

func init() {
	proto.RegisterType((*ProductHttpResponse)(nil), "structs.ProductHttpResponse")
	proto.RegisterType((*ProductPreferences)(nil), "structs.ProductPreferences")
	proto.RegisterType((*ProductsPreferences)(nil), "structs.ProductsPreferences")
	proto.RegisterType((*PreferencesMap)(nil), "structs.PreferencesMap")
	proto.RegisterType((*ProductStoreData)(nil), "structs.ProductStoreData")
	proto.RegisterType((*ProductStoreDataDump)(nil), "structs.ProductStoreDataDump")
	proto.RegisterType((*Product)(nil), "structs.Product")
}

func init() { proto.RegisterFile("structs/product_data.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 633 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x4f, 0xdb, 0x40,
	0x10, 0x95, 0xed, 0x84, 0xe0, 0x31, 0x20, 0xb4, 0x50, 0x69, 0x1b, 0x68, 0xe5, 0xe6, 0x14, 0xb5,
	0x34, 0xa8, 0xe9, 0x05, 0x71, 0xe8, 0x89, 0x56, 0xed, 0xa1, 0x80, 0x16, 0x55, 0xea, 0xcd, 0xda,
	0xc4, 0x13, 0x62, 0xd5, 0x1f, 0xab, 0xdd, 0x35, 0x88, 0x5f, 0xd6, 0x7f, 0xc0, 0xbd, 0xff, 0xa8,
	0xda, 0xf5, 0x47, 0x9c, 0x50, 0xd1, 0xdb, 0xcc, 0x7b, 0xb3, 0x6f, 0xe7, 0xcd, 0xd8, 0x0b, 0x43,
	0xa5, 0x65, 0x39, 0xd7, 0xea, 0x54, 0xc8, 0x22, 0x2e, 0xe7, 0x3a, 0x8a, 0xb9, 0xe6, 0x13, 0x21,
	0x0b, 0x5d, 0x90, 0x41, 0xcd, 0x0d, 0x8f, 0x9a, 0xa2, 0xa5, 0xd6, 0x22, 0x92, 0xa8, 0x44, 0x91,
	0x2b, 0xac, 0xaa, 0x46, 0x02, 0x0e, 0xae, 0xab, 0xb3, 0x5f, 0xb5, 0x16, 0xac, 0x26, 0xc9, 0x2b,
	0x80, 0x46, 0x32, 0x89, 0xa9, 0x13, 0x3a, 0xe3, 0x1e, 0xf3, 0x6b, 0xe4, 0x5b, 0x4c, 0xce, 0x61,
	0x77, 0x4d, 0x8c, 0xba, 0xa1, 0x33, 0x0e, 0xa6, 0x2f, 0x26, 0xf5, 0x55, 0x93, 0xae, 0x18, 0xdb,
	0x59, 0x76, 0xb2, 0xd1, 0xa3, 0x03, 0xa4, 0xbe, 0xf2, 0x5a, 0xe2, 0x02, 0x25, 0xe6, 0x73, 0x54,
	0xe4, 0x12, 0x02, 0xb1, 0x4a, 0xa9, 0x13, 0x7a, 0xe3, 0x60, 0x7a, 0xd2, 0x0a, 0x3e, 0x3d, 0x31,
	0xe9, 0xc4, 0x9f, 0x73, 0x2d, 0x1f, 0x58, 0x57, 0x80, 0x84, 0x10, 0x08, 0x94, 0x73, 0xcc, 0x75,
	0x92, 0xa2, 0xa2, 0x6e, 0xe8, 0x8d, 0x5d, 0xd6, 0x85, 0x86, 0x9f, 0x60, 0x7f, 0x53, 0x82, 0xec,
	0x83, 0xf7, 0x0b, 0x1f, 0x6a, 0xc3, 0x26, 0x24, 0x87, 0xd0, 0xbf, 0xe3, 0x69, 0x59, 0x59, 0x74,
	0x59, 0x95, 0x9c, 0xbb, 0x67, 0xce, 0xe8, 0xb7, 0xd3, 0xce, 0x4e, 0x75, 0x9d, 0x7c, 0x81, 0xed,
	0x7a, 0x52, 0x8d, 0x8d, 0xb7, 0x9b, 0x36, 0xd4, 0xba, 0x8f, 0x0a, 0xab, 0x4c, 0xb4, 0x67, 0x87,
	0x3f, 0x61, 0x77, 0x8d, 0xfa, 0x47, 0x73, 0x1f, 0xba, 0xcd, 0x05, 0xd3, 0xa3, 0x67, 0xc6, 0xd5,
	0xed, 0xfc, 0xd1, 0x81, 0xbd, 0x0e, 0xf5, 0x9d, 0x0b, 0x72, 0x03, 0x7b, 0x62, 0x0d, 0xa9, 0x5b,
	0x7f, 0xd7, 0x91, 0xec, 0xd2, 0x1b, 0x69, 0xd5, 0xfb, 0x86, 0xc4, 0x30, 0x32, 0x03, 0x7a, 0x52,
	0xd6, 0xf5, 0xe1, 0x57, 0x3e, 0xa6, 0xeb, 0x3e, 0x8e, 0x9f, 0x9b, 0xd7, 0xda, 0x0a, 0x5c, 0xb3,
	0x43, 0x5b, 0x72, 0xa3, 0x0b, 0x89, 0x17, 0x5c, 0x73, 0x42, 0xa0, 0x97, 0xf3, 0x0c, 0x6b, 0x7d,
	0x1b, 0x93, 0x21, 0x6c, 0xcf, 0x78, 0x8e, 0xf2, 0x87, 0x4c, 0xed, 0x1d, 0x3e, 0x6b, 0x73, 0x53,
	0xaf, 0xf9, 0xad, 0xa2, 0x5e, 0xe8, 0x99, 0x7a, 0x13, 0x9b, 0xad, 0xdf, 0x62, 0x2e, 0x91, 0xf6,
	0x2c, 0x58, 0x25, 0x06, 0x5d, 0xa4, 0xa6, 0xb4, 0x5f, 0xa1, 0x36, 0x21, 0xc7, 0xe0, 0xc7, 0x78,
	0x87, 0x69, 0x21, 0x50, 0xd2, 0x2d, 0xcb, 0xac, 0x00, 0xc3, 0x8a, 0x72, 0x96, 0x26, 0x6a, 0x89,
	0x92, 0x0e, 0x2a, 0xb6, 0x05, 0xc8, 0x6b, 0x00, 0xbd, 0x2c, 0xb3, 0x59, 0xce, 0x93, 0x54, 0xd1,
	0x6d, 0x4b, 0x77, 0x10, 0xd3, 0xb7, 0x96, 0x3c, 0x49, 0x51, 0x2a, 0xea, 0x5b, 0xb6, 0xcd, 0xc9,
	0x1b, 0xd8, 0x91, 0x98, 0x22, 0x57, 0x68, 0x7e, 0x7b, 0xa4, 0x10, 0x3a, 0x63, 0x8f, 0x05, 0x35,
	0x76, 0xc1, 0x35, 0x12, 0x0a, 0x03, 0x89, 0x77, 0x09, 0xde, 0x2b, 0x1a, 0x84, 0xce, 0xb8, 0xcf,
	0x9a, 0x74, 0xa4, 0xe0, 0x70, 0x73, 0x70, 0x17, 0x65, 0x26, 0xc8, 0x7b, 0xe8, 0x99, 0x37, 0xc4,
	0x0e, 0x2f, 0x98, 0xbe, 0xdc, 0x5c, 0x44, 0x5b, 0xcc, 0x6c, 0x99, 0x71, 0xa7, 0x93, 0x0c, 0x95,
	0xe6, 0x99, 0xb0, 0x83, 0xf5, 0xd8, 0x0a, 0x20, 0x7b, 0xe0, 0x26, 0x31, 0xf5, 0xec, 0xf7, 0xea,
	0x26, 0xf1, 0xe8, 0x8f, 0x03, 0x83, 0x5a, 0xa8, 0xe6, 0x9c, 0x86, 0x33, 0x2f, 0x4e, 0x71, 0x9f,
	0xa3, 0x54, 0x51, 0x5e, 0x66, 0x56, 0xaa, 0xc7, 0xfc, 0x0a, 0xb9, 0x2c, 0x33, 0x72, 0x02, 0x64,
	0x21, 0xf9, 0x5c, 0x27, 0x45, 0x1e, 0x15, 0x8b, 0xa8, 0x22, 0xac, 0xb4, 0xcb, 0xf6, 0x1b, 0xe6,
	0x6a, 0x71, 0x65, 0x71, 0x72, 0x0a, 0x07, 0x22, 0xe5, 0x0f, 0xa6, 0x93, 0x68, 0xf5, 0xcb, 0xdb,
	0x65, 0xf6, 0x18, 0x69, 0xa8, 0xeb, 0x96, 0x21, 0x67, 0x00, 0xca, 0x58, 0xb3, 0x0f, 0x28, 0xed,
	0xff, 0xcf, 0xbc, 0xaf, 0x9a, 0x70, 0xb6, 0x65, 0xdf, 0xd1, 0x8f, 0x7f, 0x03, 0x00, 0x00, 0xff,
	0xff, 0x6c, 0x8c, 0xe6, 0x69, 0x8b, 0x05, 0x00, 0x00,
}
